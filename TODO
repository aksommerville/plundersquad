General errors:
- Bomber multiexplode on heal point
...I can't reproduce this except by tapping button repeatedly
- Pushing monsters onto HEROONLY. eg blueprint 061-penguin-corridor. Does HEROONLY need a rethinking?
    - We could make HEROONLY advisory only.
      Prevent spawn and summoner from putting monsters there.
      Then each monster type should check it explicitly.
      It would have to be removed from the 'impassable' masks, and a special case made for it in every mobile sprite type.
      But lots of sprites don't even look at the grid physics, so they would either not respect it or would need heavy rework.
    - We could make a special case in physics and ignore it.
      I think that's mostly the same problem as solution 1.
    - Can we remove HEROONLY from a sprite's impassable mask when it's being pushed?
      Then restore it later?
      That's the basic idea we did with hookshots.

Raspi errors:

Linux errors:
- !!! segfault collecting treasure (GLX, strawberry, 2/5) !!!
  ...update: it's not the strawberry
- Another freeze at quit on Linux. ALSA?

Windows errors:
- Freeze on startup, Windows:
  MSAUDIO:TRACE: ps_msaudio_init [src/opt/msaudio/ps_msaudio.c:89]
- Toggling out of fullscreen, other windows don't repaint

MacOS errors:

Actionable:
- Conveyor belts

Windows:
- Build with GL2 support
- src/opt/msaudio/ps_msaudio.c:6://TODO Need a mutex to protect callback
- src/opt/mshid/ps_mshid_global.c:186:     * TODO Signed values in MS HID input. (tricky!)
- src/opt/mswm/ps_mswm_global.c:66:  int x=100,y=100;//TODO window position
- src/opt/mswm/ps_mswm_event.c:105:    //TODO We receive WM_SIZE when the resize is complete. Can we get it on the fly too?
- src/opt/mswm/ps_mswm_graphics.c:25:  //TODO Assert OpenGL features.

MacOS:
- Developer license
- Sign code

Linux:
- src/opt/glx/ps_glx_global.c:298:      //TODO Test window icon for big-endian GLX. Do we have a PowerPC box somewhere?

Raspi:

Optimization, cleanup, low priority:
- src/input/ps_input_report_reader.c:365:  // TODO This comparison could be more efficient. Especially with bitfields; it seems wasteful to examine each bit individually.
- Store background image to texture
- ps_sdraw_draw_line(): Optimize writes
- sdraw: optimize blits
- Clean up logging
- Review ps_widget_inputcfgpage for cases with (a) no devices or (b) only joysticks
- src/opt/msaudio/ps_msaudio.c:117:  int buffer_size=8192; // bytes (TODO optimal size?)
- Review stubs in akgl_soft_shaders.c
- Can we avoid using the same blueprint twice within a scenario?

Ongoing, loosely-defined items:
- Review dragoncharger with multiple real players.
- src/video/ps_image_decode.c:242:  /* TODO Image filter: Either improve it or take it out.
- Revisit scenario encoding, make it work, add UI to support it
- Review award assignment with realistic data
- Should we pause or something when window loses focus?

Optional:
- Final boss?
- src/input/ps_input_report_reader.h:3: * TODO We don't support collection fields, like for HID keyboards. Should we? Our focus is joysticks.

Blocked:
- Full review of data
- Documentation
- Promo
- Final packaging

Rejected:
- Scissor for sdraw blits. Only needed by editor.
  sdraw is already a performance problem. Don't make it any worse, just for the editor's sake.
- Input swap: Should we enable this for production use?
  No. Too complicated.
- src/scenario/ps_scgen.c:844: * TODO Our use of (visited) is not perfect, it will give bad counts if there is a loop.
  No harm, not worth the trouble.
- src/gui/editor/ps_widget_sfxchan.c:300:  //TODO coordinate graph value limits with button in channel widget
  It's working, whatever.
